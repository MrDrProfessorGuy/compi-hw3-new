Nonterminals useless in grammar

    Marker
    OpenScopeCont
    CloseScope
    Program
    Funcs
    FuncDecl
    $@1
    RetType
    Formals
    FormalsList
    FormalDecl
    Statements
    Statement
    $@2
    $@3
    $@4
    Call
    ExpList
    Type
    Exp
    ExpBool


Terminals unused in grammar

    ID
    NUM
    STRING
    VOID
    INT
    BYTE
    B
    BOOL
    TRUE
    FALSE
    RETURN
    WHILE
    BREAK
    CONTINUE
    SC
    COMMA
    LPAREN
    RPAREN
    ASSIGN
    ELSE
    OR
    AND
    EQUALITY
    RELOP
    BINOP_ADD
    BINOP_MUL
    NOT
    LBRACE
    RBRACE


Rules useless in grammar

    2 OpenScopeCont: ε

    3 CloseScope: ε

    4 Program: Funcs

    5 Funcs: ε
    6      | FuncDecl Funcs

    7 $@1: ε

    8 FuncDecl: RetType ID LPAREN Formals RPAREN $@1 LBRACE Statements RBRACE

    9 RetType: Type
   10        | VOID

   11 Formals: ε
   12        | FormalsList

   13 FormalsList: FormalDecl
   14            | FormalDecl COMMA FormalsList

   15 FormalDecl: Type ID

   16 Statements: Statement
   17           | Statements Statement

   18 Statement: LBRACE OpenScopeBlock Statements RBRACE CloseScope
   19          | Type ID SC
   20          | Type ID ASSIGN Exp SC
   21          | ID ASSIGN Exp SC
   22          | Call SC
   23          | RETURN SC
   24          | RETURN Exp SC

   25 $@2: ε

   26 Statement: IF LPAREN $@2 ExpBool RPAREN Statement CloseScope

   27 $@3: ε

   28 Statement: IF LPAREN $@3 ExpBool RPAREN Statement CloseScope ELSE OpenScopeCont Statement CloseScope

   29 $@4: ε

   30 Statement: WHILE LPAREN $@4 ExpBool RPAREN Statement CloseScope
   31          | BREAK SC
   32          | CONTINUE SC

   33 Call: ID LPAREN ExpList RPAREN
   34     | ID LPAREN RPAREN

   35 ExpList: Exp
   36        | Exp COMMA ExpList

   37 Type: INT
   38     | BYTE
   39     | BOOL

   40 Exp: LPAREN Exp RPAREN
   41    | Exp IF LPAREN Exp RPAREN ELSE Exp
   42    | Exp BINOP_ADD Exp
   43    | Exp BINOP_MUL Exp
   44    | ID
   45    | Call
   46    | NUM
   47    | NUM B
   48    | STRING
   49    | TRUE
   50    | FALSE
   51    | NOT Exp
   52    | Exp AND Exp
   53    | Exp OR Exp
   54    | Exp RELOP Exp
   55    | Exp EQUALITY Exp
   56    | LPAREN Type RPAREN Exp

   57 ExpBool: Exp


Grammar

    0 $accept: OpenScopeBlock $end

    1 OpenScopeBlock: ε


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ID <NodeToken> (258)
    NUM <NodeToken> (259)
    STRING <NodeToken> (260)
    VOID <NodeToken> (261)
    INT <NodeToken> (262)
    BYTE <NodeToken> (263)
    B <NodeToken> (264)
    BOOL <NodeToken> (265)
    TRUE <NodeToken> (266)
    FALSE <NodeToken> (267)
    RETURN <NodeToken> (268)
    WHILE <NodeToken> (269)
    BREAK <NodeToken> (270)
    CONTINUE <NodeToken> (271)
    SC <NodeToken> (272)
    COMMA <NodeToken> (273)
    LPAREN <NodeToken> (274)
    RPAREN <NodeToken> (275)
    ASSIGN <NodeToken> (276)
    IF <NodeToken> (277)
    ELSE <NodeToken> (278)
    OR <NodeToken> (279)
    AND <NodeToken> (280)
    EQUALITY <NodeToken> (281)
    RELOP <NodeToken> (282)
    BINOP_ADD <NodeToken> (283)
    BINOP_MUL <NodeToken> (284)
    NOT <NodeToken> (285)
    LBRACE <NodeToken> (286)
    RBRACE <NodeToken> (287)


Nonterminals, with rules where they appear

    $accept (33)
        on left: 0
    OpenScopeBlock (34)
        on left: 1
        on right: 0


State 0

    0 $accept: • OpenScopeBlock $end
    1 OpenScopeBlock: ε •

    $default  reduce using rule 1 (OpenScopeBlock)

    OpenScopeBlock  go to state 1


State 1

    0 $accept: OpenScopeBlock • $end

    $end  shift, and go to state 2


State 2

    0 $accept: OpenScopeBlock $end •

    $default  accept
